type AuthPayload {
  token: String
  user: User
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  createUser(input: UserInput): User
  deleteUser(id: ID!): User
  updateUser(input: UserInput): User
  login(input: LoginInput): AuthPayload
  createPost(input: PostInput): Post
}

type Post {
  id: ID
  title: String
  description: String!
  user: User
}

input PostInput {
  id: ID
  title: String
  description: String!
  author: ID!
}

type Query {
  getUser(id: ID!): UserWithoutPassword
  getUsers(q: Search): [UserWithoutPassword]
  getPosts: Post
}

input Search {
  limit: Int
  offset: Int
  text: String
}

type User {
  id: ID
  name: String!
  email: String!
  password: String!
  posts: [Post]
}

input UserInput {
  id: ID
  name: String!
  email: String!
  password: String!
}

type UserWithoutPassword {
  id: ID
  name: String!
  email: String!
  posts: [Post]
}

type UserWithoutPost {
  id: ID
  name: String!
  email: String!
}
